// <auto-generated />
using System;
using IncidentManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IncidentManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250327005053_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdIncident")
                        .HasColumnType("uuid");

                    b.HasKey("IdComment");

                    b.HasIndex("IdIncident");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Incident", b =>
                {
                    b.Property<Guid>("IdIncident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("IdTechnician")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdIncident");

                    b.HasIndex("IdTechnician");

                    b.HasIndex("IdUser");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("IdTechnician")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleTechnician")
                        .HasColumnType("integer");

                    b.HasKey("IdTechnician");

                    b.ToTable("Technicians");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Comment", b =>
                {
                    b.HasOne("IncidentManagement.Domain.Entities.Incident", "Incident")
                        .WithMany("Comments")
                        .HasForeignKey("IdIncident")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Incident", b =>
                {
                    b.HasOne("IncidentManagement.Domain.Entities.Technician", "Technician")
                        .WithMany("AssignedIncidents")
                        .HasForeignKey("IdTechnician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentManagement.Domain.Entities.User", "User")
                        .WithMany("ReportedIncidents")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Incident", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.Technician", b =>
                {
                    b.Navigation("AssignedIncidents");
                });

            modelBuilder.Entity("IncidentManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("ReportedIncidents");
                });
#pragma warning restore 612, 618
        }
    }
}
